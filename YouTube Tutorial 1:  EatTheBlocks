#Tutorial name/'link': https://www.youtube.com/watch?v=yzcp594R92c&list=PLbbtODcOYIoE0D6fschNU4rqtGFRpk3ea&index=3

#Video 1:
Solidity Tutorial: Introduction

#Video 2:
Solidity Tutorial: Remix IDE (new layout)

#Video 3:
Solidity Tutorial: Structure of Smart contract

Basic syntax of Solidity programs (But the code is wrong// help me find the error?!!)
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

contract Mycontract {
    uint a;
    uint b;

    function add() public view returns (uint) {
        uint c;
        c=a+b;
        return c;
    }
}
ABI: 
[
	{
		"inputs": [],
		"name": "add",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]

Doubt// How to solve the Solidity Static Analysis Error for GAS COSTS: 
Gas requirement of function Mycontract.add is infinite:
If the gas requirement of a function is higher than the block gas limit, it cannot be executed.
Please avoid loops in your functions or actions that modify large areas of storage
(this includes clearing or copying arrays in storage)
Pos: 8:4:

#Video 4:
Solidity Tutorial: Variable types

pragma solidity ^0.8.11;

contract Mycontract {
    //1. Fixed-sized types: these types occuppy a fix size in memory;

    bool isReady; //true/false
    uint a;//you can only hold positive numbers it has to be integer cannot be float or character type like 1, 2, 3, 4, 5 etc
    address recipients; //to represent ethereum addresses, to declare the address of the recipients, if you want to declare ether or tokens. Need to know in order to interact with another smart contract or recipient of financial address
    bytes32 data; //any arbitrary binary data. any series of byte that represents some data can be used with this variable
    


    
    //2. Variable-sized types: these are bit more complex and hold data of a variable of defined length
    string name; // string of any length however we cannot manipulate strings in Solidity. can be used to represent the byte32 data (dont know why)
    bytes _data;//generalisation of the bytes32 type arbitrary data, also used to represent any kind of binary data but contrary to bytes32 these does not have a predefined length
    uint[] amounts; //contrary to Java acript an Array of have to be an array of same types, hence its less flexible than JVS
    mapping(uint => string) users; users[10] => 'somestring'// mappings are associated array they have keys and value pairs just like dictionaries in Python here key can be a variable of a certain datatype say uint and say the value is of string type. Then we define the name of the mapping say users








    //3. User-defined data  types: customisation of a data, add more dynamics to it is then you use this data types


}



